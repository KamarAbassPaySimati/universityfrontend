trigger:
  branches:
    include:
      - qa
      - pre-production
      - master
pr:
  branches:
    include:
      - qa
variables:
  - group: general
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    - group: master
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/qa') }}:
    - group: qa
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/pre-production') }}:
    - group: pre-production
  - ${{ if or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')) }}:
    - group: develop


stages:
- stage: CodeQuality
  jobs:
    # - job: "Download_Environment"
    #   displayName: "Dependencies"
    #   pool:
    #     vmImage: "ubuntu-latest"
    #   steps:
    #     - script: |
    #         sudo pip3 install --upgrade pip
    #         pip3 install awscli --upgrade --user
    #         export PATH="/home/vsts/.local/bin:$PATH"
    #         sh scripts/envs.sh
    #       displayName: 'Copy Environment Files'
    #     - publish: $(System.DefaultWorkingDirectory)/.env
    #       artifact: Environment
    #     - task: DownloadSecureFile@1
    #       name: deployment_secrity_file
    #       displayName: 'Download Environment'
    #       inputs:
    #         secureFile: "afrimaxpayplatform-8783245672f3.json"
    #     - task: DownloadSecureFile@1
    #       name: deployment_keystore_file
    #       displayName: 'Download Environment'
    #       inputs:
    #         secureFile: "paymaart_agent.jks"
    #     - script: |
    #         mkdir secure_files
    #         cp $(deployment_keystore_file.secureFilePath) secure_files/paymaart_agent.jks
    #         cp $(deployment_secrity_file.secureFilePath) secure_files/afrimaxpayplatform-8783245672f3.json
    #     - publish: $(System.DefaultWorkingDirectory)/secure_files
    #       artifact: SecretFiles
    - job: "lint"
      displayName: "Code Quality"
      condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
      pool:
          vmImage: "ubuntu-latest"
      steps:
        - task: Cache@2
          inputs:
            key: 'npm | "$(Agent.OS)" | package.json'
            restoreKeys: |
              npm | "$(Agent.OS)"
            path: "$(System.DefaultWorkingDirectory)/node_modules"
            cacheHitVar: CACHE_RESTORED
          displayName: Cache npm
        - script: |
            npm install --cache .npm
          condition: ne(variables.CACHE_RESTORED, 'true')
          displayName: 'Dependencies'
        - script: |
            npm run eslint
          displayName: 'Lint'
    - job: "secret"
      displayName: "Secret Checking"
      condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
      pool:
          vmImage: "ubuntu-latest"
      steps:
        - script: |
            pip3 install detect-secrets
            detect-secrets scan
          displayName: 'Lint'
    - job: "licence_complaiance"
      displayName: "License Compliance"
      condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
      pool:
          vmImage: "ubuntu-latest"
      steps:
        - script: |
            npm install -g license-checker 
            license-checker --json > licenses.json  
            node scripts/license.js
          displayName: 'License Compliance'
    - job: "sast"
      displayName: 'Static Application Security Testing (SAST)'
      condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
      pool:
          vmImage: "ubuntu-latest"
      steps:
        - script: |
            pip3 install njsscan
            njsscan -w .
          displayName: 'Static Application Security Testing (SAST)'
    # - job: "dast"
    #   displayName: 'Dynamic Application Security Testing (DAST)'
    #   dependsOn: Download_Environment
    #   condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
    #   pool:
    #       vmImage: "ubuntu-latest"
    #   steps:
    #     - script: |
    #         echo "test"
    #         # pip install --upgrade mobsfscan
    #         # mobsfscan -w app/src --config scripts/.mobsf
    #       displayName: 'Dynamic Application Security Testing (DAST)'
- stage: Build
  jobs:
    - job: "Download_Environment"
      displayName: "Dependencies"
      pool:
        vmImage: "ubuntu-latest"
      steps:
        - script: |
            sudo pip3 install --upgrade pip
            pip3 install awscli --upgrade --user
            export PATH="/home/vsts/.local/bin:$PATH"
            sh scripts/azure_envs.sh
          displayName: 'Copy Environment Files'
        - publish: $(System.DefaultWorkingDirectory)/.env
          artifact: Environment
    - job: build
      displayName: "Build"
      dependsOn: Download_Environment
      pool:
        vmImage: "ubuntu-latest"
      steps:
        - task: Cache@2
          inputs:
            key: 'npm | "$(Agent.OS)" | package.json'
            restoreKeys: |
              npm | "$(Agent.OS)"
            path: "$(System.DefaultWorkingDirectory)/node_modules"
            cacheHitVar: CACHE_RESTORED
          displayName: Cache npm
        - script: |
            npm install --cache .npm
          condition: ne(variables.CACHE_RESTORED, 'true')
          displayName: 'Dependencies'
        - script: |
            npm run build
            mkdir artifact
            mv dist artifact
          displayName: 'Build'
        - publish: $(System.DefaultWorkingDirectory)/artifact
          artifact: bundle
- stage: Test
  jobs:
    - job: UnitTesting
      displayName: "Unit Testing"
      condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
      pool:
        vmImage: "ubuntu-latest"
      steps:
        - task: Cache@2
          inputs:
            key: 'npm | "$(Agent.OS)" | package.json'
            restoreKeys: |
              npm | "$(Agent.OS)"
            path: "$(System.DefaultWorkingDirectory)/node_modules"
            cacheHitVar: CACHE_RESTORED
          displayName: Cache npm
        - script: |
            npm install --cache .npm
          condition: ne(variables.CACHE_RESTORED, 'true')
        - task: DownloadPipelineArtifact@2
          name: environment
          inputs:
            artifact: Environment
            targetPath: '$(System.DefaultWorkingDirectory)'
        - task: DownloadPipelineArtifact@2
          name: bundle
          inputs:
            artifact: bundle
            targetPath: '$(System.DefaultWorkingDirectory)'
        - script: |
            npm install pm2 -g
            source .env
            npm install express --force
            pm2 start scripts/server.js
            sleep 60
            mkdir reports
            npm install nyc --save-dev --force
            node scripts/bdd_unit_testing.js
    - job: UnitTestingResult
      displayName: "Unit Testing Result"
      condition: or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix'))
      dependsOn: UnitTesting
      pool:
        vmImage: "ubuntu-latest"
      steps:
      - script: |
          source .env
          mkdir coverage
          npm install nyc --save-dev --force
          npm run generate_report
          node scripts/livingdoc.js
          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_MAIN}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_MAIN}
          aws s3 sync living-documentation s3://$S3_BUCKET_LIVING_DOCUMENTATION/living-documentation-ADMIN/${variables['build.SourceBranch']}/
          aws s3 sync coverage s3://$S3_BUCKET_LIVING_DOCUMENTATION/coverage-ADMIN/${variables['build.SourceBranch']}
        displayName: 'BDD Living documentation'
    - job: IntegrationTesting
      displayName: "Integration Testing"
      condition: and(succeeded(), contains(variables['build.SourceBranch'], 'qa'))
      pool:
        vmImage: "ubuntu-latest"
      steps:
        - task: DownloadPipelineArtifact@2
          name: environment
          inputs:
            artifact: Environment
            targetPath: '$(System.DefaultWorkingDirectory)'
        - task: DownloadPipelineArtifact@2
          name: bundle
          inputs:
            artifact: bundle
            targetPath: '$(System.DefaultWorkingDirectory)'
        - script: |
            npm install pm2 -g
            source .env
            npm install express --force
            pm2 start scripts/server.js
            sleep 60
            mkdir reports
            npm install nyc --save-dev --force
            node scripts/bdd-execution-split1.js
    
- stage: Deploy
  jobs:
    - job: deployment
      displayName: "Deployment"
      condition: and(succeeded(), or(contains(variables['build.SourceBranch'], 'qa'), contains(variables['build.SourceBranch'], 'master'), contains(variables['build.SourceBranch'], 'pre-production')))
      pool:
        vmImage: "macOS-13"
      steps:
        - task: DownloadPipelineArtifact@2
          name: bundle
          inputs:
            artifact: bundle
            targetPath: '$(System.DefaultWorkingDirectory)'
        - task: DownloadPipelineArtifact@2
          name: environment
          inputs:
            artifact: environment
            targetPath: '$(System.DefaultWorkingDirectory)'
        - script: |
            source .env
            aws s3 sync dist s3://$ADMIN_S3_BUCKET
            aws cloudfront create-invalidation --distribution-id $ADMIN_DISTRIBUTION_ID --paths "/*"
          displayName: 'Deployment'

    # - deployment: production
    #   condition: and(succeeded(), contains(variables['build.SourceBranch'], 'master'))
    #   pool:
    #     vmImage: "macOS-13"
    #   environment: Production
    #   strategy:
    #     runOnce:
    #       deploy:
    #         steps:
    #         - checkout: self
    #         - task: JavaToolInstaller@0
    #           inputs:
    #             versionSpec: '17'
    #             jdkArchitectureOption: 'x64'
    #             jdkSourceOption: 'PreInstalled'
    #         - task: DownloadPipelineArtifact@2
    #           name: environment
    #           inputs:
    #             artifact: Environment
    #             targetPath: '$(System.DefaultWorkingDirectory)'
    #         - task: DownloadPipelineArtifact@2
    #           name: SecretFiles
    #           inputs:
    #             artifact: SecretFiles
    #             targetPath: '$(System.DefaultWorkingDirectory)'
    #         - script: |
    #             cp $(System.DefaultWorkingDirectory)/paymaart_agent.jks $(System.DefaultWorkingDirectory)/app/paymaart_agent.jks
    #             export BUILD_NUMBER=$(Build.BuildId)
    #             brew install fastlane
    #             fastlane android production
    #           displayName: 'Deployment'
    
    # - deployment: staging
      # condition: and(succeeded(), contains(variables['build.SourceBranch'], 'pre-production'))
      # pool:
      #   vmImage: "macOS-13"
      # environment: Pre-Production
      # strategy:
      #   runOnce:
      #     deploy:
      #       steps:
      #         - checkout: self
      #         - task: JavaToolInstaller@0
      #           inputs:
      #             versionSpec: '17'
      #             jdkArchitectureOption: 'x64'
      #             jdkSourceOption: 'PreInstalled'
      #         - task: DownloadPipelineArtifact@2
      #           name: environment
      #           inputs:
      #             artifact: Environment
      #             targetPath: '$(System.DefaultWorkingDirectory)'
      #         - task: DownloadPipelineArtifact@2
      #           name: SecretFiles
      #           inputs:
      #             artifact: SecretFiles
      #             targetPath: '$(System.DefaultWorkingDirectory)'
      #         - script: |
      #             cp $(System.DefaultWorkingDirectory)/paymaart_agent.jks $(System.DefaultWorkingDirectory)/app/paymaart_agent.jks
      #             brew install fastlane
      #             fastlane android production
      #           displayName: 'Deployment'